{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\maha\\\\Desktop\\\\test-app\\\\weather-app\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as ImagePicker from 'expo-image-picker';\nexport default function App() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedImage = _React$useState2[0],\n      setSelectedImage = _React$useState2[1];\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert(\"Permission to access camera roll is required!\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            setSelectedImage({\n              localUri: pickerResult.uri\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (selectedImage !== null) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: selectedImage.localUri\n      },\n      style: styles.thumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }));\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: \"https://i.imgur.com/TkIrScD.png\"\n    },\n    style: styles.testImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.textA,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, \"This is my first app \"), React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"upload \")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  testImg: {\n    width: 305,\n    height: 159,\n    marginBottom: 10\n  },\n  textA: {\n    color: '#888',\n    fontSize: 40,\n    marginHorizontal: 30\n  },\n  button: {\n    backgroundColor: \"blue\",\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\"\n  }\n});","map":{"version":3,"sources":["C:/Users/maha/Desktop/test-app/weather-app/App.js"],"names":["StatusBar","React","ImagePicker","App","useState","selectedImage","setSelectedImage","openImagePickerAsync","requestCameraRollPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","localUri","uri","styles","container","thumbnail","testImg","textA","button","buttonText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","marginBottom","color","fontSize","marginHorizontal","padding","borderRadius","resizeMode"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Image, StyleSheet, Text, TouchableOpacity,View } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function App() {\n  const [selectedImage, setSelectedImage] = React.useState(null);\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert(\"Permission to access camera roll is required!\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n  \n    if (pickerResult.cancelled === true) {\n      return;\n    }\n    setSelectedImage({ localUri: pickerResult.uri });\n};\nif(selectedImage !== null){\n  return (\n    <View style={styles.container}>\n    <Image\n      source={{uri :selectedImage.localUri}}\n      style={styles.thumbnail}\n      />\n    </View>\n  );\n}\n \n  return (\n    <View style={styles.container}>\n      <Image source={{uri: \"https://i.imgur.com/TkIrScD.png\" }} style={styles.testImg} />\n            <Text style={styles.textA}>This is my first app </Text>\n            <TouchableOpacity onPress={openImagePickerAsync}\n      \n        style={styles.button}>\n        <Text style={styles.buttonText}>upload </Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  testImg: {\n    width: 305,\n    height: 159,\n    marginBottom: 10,\n\n  },\n  textA: {\n    color: '#888',\n    fontSize: 40,\n    marginHorizontal: 30,\n  \n  },\n  button: {\n    backgroundColor: \"blue\",\n    padding: 20,\n    borderRadius: 5,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  }, \n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\"\n  }\n});\n"]},"metadata":{},"sourceType":"module"}